name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Format check with Black
      run: |
        black --check mac_changer.py test_mac_changer.py setup.py

    - name: Import sorting check with isort
      run: |
        isort --check-only --profile black mac_changer.py test_mac_changer.py setup.py

    - name: Lint with Flake8
      run: |
        flake8 mac_changer.py test_mac_changer.py setup.py

    - name: Type check with MyPy
      run: |
        mypy mac_changer.py

    - name: Security scan with Bandit
      run: |
        bandit -r mac_changer.py -f json -o bandit-report.json

    - name: Check for vulnerabilities with Safety
      run: |
        safety check

    - name: Test with pytest
      run: |
        pytest test_mac_changer.py --cov=mac_changer --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload bandit results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: bandit-report.json

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint

    - name: Lint with Pylint
      run: |
        pylint mac_changer.py --output-format=json > pylint-report.json || true

    - name: Upload pylint results
      uses: actions/upload-artifact@v3
      with:
        name: pylint-results
        path: pylint-report.json

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme

    - name: Check documentation
      run: |
        python -c "import mac_changer; help(mac_changer)" > docs-check.txt

    - name: Validate README
      run: |
        python -c "
        import re
        with open('README.md', 'r') as f:
            content = f.read()
            if not re.search(r'# MAC Address Changer', content):
                raise ValueError('README.md missing main header')
            if not re.search(r'## Installation', content):
                raise ValueError('README.md missing installation section')
            if not re.search(r'## Usage', content):
                raise ValueError('README.md missing usage section')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Run Bandit security scan
      run: |
        bandit -r mac_changer.py -f json -o bandit-security-report.json

    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-report.json || true

    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto mac_changer.py --json --output=semgrep-report.json || true

    - name: Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: |
          bandit-security-report.json
          safety-report.json
          semgrep-report.json

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark

    - name: Run performance tests
      run: |
        python -c "
        import time
        import mac_changer

        # Test MAC validation performance
        mac_changer_instance = mac_changer.MACChanger()
        start_time = time.time()
        for _ in range(10000):
            try:
                mac_changer_instance.validate_mac_address('aa:bb:cc:dd:ee:ff')
            except Exception:
                pass
        end_time = time.time()

        print(f'MAC validation: {(end_time - start_time)*1000:.2f}ms for 10k validations')

        # Test interface validation performance
        start_time = time.time()
        for _ in range(1000):
            try:
                mac_changer_instance.interface_regex.match('eth0')
            except Exception:
                pass
        end_time = time.time()

        print(f'Interface validation: {(end_time - start_time)*1000:.2f}ms for 1k validations')
        "

  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, macos-11, macos-12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Test system compatibility
      run: |
        python -c "
        import mac_changer
        try:
            mac_changer_instance = mac_changer.MACChanger()
            mac_changer_instance.check_system_compatibility()
            print('✅ System compatibility check passed')
        except Exception as e:
            print(f'❌ System compatibility check failed: {e}')
            exit(1)
        "

    - name: Test interface discovery
      run: |
        python -c "
        import mac_changer
        try:
            mac_changer_instance = mac_changer.MACChanger()
            interfaces = mac_changer_instance.get_available_interfaces()
            print(f'✅ Found {len(interfaces)} interfaces: {interfaces}')
        except Exception as e:
            print(f'❌ Interface discovery failed: {e}')
            exit(1)
        "
